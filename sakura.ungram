
// Items
Export =
    'export'

SourceFile =
    Item*

Item =
      TypeDeclaration
    | FunctionDeclaration

TypeDeclaration =
    Export?
    'type' Name generic_parameters:GenericParameterList? constraints:ConstraintList? '=' body:Type

FunctionDeclaration =
    Export?
    'fn' Name generic_parameters:GenericParameterList? constraints:ConstraintList? parameters:FunctionParameterList ':' Type body:Block

FunctionParameterList =
    '(' parameters:(FunctionParameter (',' FunctionParameter)* ','?)? ')'

FunctionParameter =
    Name ':' Type

// Types
Type =
      NamedType
    | BoxedType
    | ReferenceType
    | InferredType
    | SliceType
    | ArrayType
    | StructType
    | EnumType
    | UnionType
    | TraitType
    | FunctionType

BoxedType =
    'box' Type

ReferenceType =
    'ref' Type

InferredType =
    '_'

SliceType =
    '[' Type ']'

ArrayType =
    '[' Type ';' Expression ']'

NamedType =
    Name GenericArgumentList?

StructType =
    'struct' body:StructFieldList

StructFieldList =
    '{' 
        fields:(StructField (',' StructField)* ','?)?
    '}'

StructField =
    Name ':' Type DelegatedField?

DelegatedField =
    'delegate' Type

EnumType =
    'enum' EnumVariantList

EnumVariantList =
    '{'
        variants:(EnumVariant (',' EnumVariant)* ','?)?
    '}'

EnumVariant =
    Name expression:EnumVariantExpression?

EnumVariantExpression =
    '=' value:Expression

UnionType =
    'union' UnionTypeBody

UnionTypeBody =
    UnionTypeVariantList

UnionTypeVariantList =
    '{'
        variants:(UnionTypeVariant (',' UnionTypeVariant)* ','?)?
    '}'

UnionTypeVariant =
    Name ParenthesizedTypeList?

TypeList =
    types:(Type (',' Type)* ','?)?

ParenthesizedTypeList =
    '(' TypeList ')'

TraitType =
    'trait' '{' items:TraitItem* '}'

TraitItem =
    FunctionType

FunctionType =
    'fn' generic_parameters:GenericParameterList? constraints:ConstraintList? parameters:ParenthesizedTypeList ':' Type


// Generics
GenericParameterList =
    '[' params:(Name (',' Name)* ','?) ']'

TypeParameter =
    Name ('=' default_type:NamedType)?

GenericArgumentList =
    '[' arguments:(TypeArgument (',' TypeArgument)* ','?)? ']'

TypeArgument =
    NamedType

ConstraintList =
    Constraint*

Constraint =
    'where' param:Name ':' bounds:TypeList

TypeBoundList =
    bounds:(TypeBound ('+' TypeBound)* '+'?)

TypeBound =
    Type

// Expressions
Block =
    '{' expressions:Expression* '}'

Expression =
      BinaryExpression
    | InterpolatedString
    | Literal
    | Name
    | Block

BinaryExpression =
    lhs:Expression
    op:(
        '||' | '&&'
        | '==' | '!=' | '<=' | '>=' | '<' | '>'
        | '+' | '*' | '-' | '/' | '%' | '<<' | '>>' | '^' | '|' | '&'
        | '=' | '+=' | '/=' | '*=' | '%=' | '>>=' | '<<=' | '-=' | '|=' | '&=' | '^='
    )
    rhs:Expression

InterpolatedString =
    start:'string' parts:InterpolatedStringParts* end:'string'

InterpolatedStringParts =
    value:('string' | InterpolatedStringSlot)

InterpolatedStringSlot =
    '$' '{' Expression '}'

Name =
    'identifier'

Literal =
    value:(
        'int' | 'float'
        | 'string' | 'char' | 'byte'
        | 'true' | 'false'
    )
