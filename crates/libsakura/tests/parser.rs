//! Code generated by `cargo xtask codegen`; DO NOT EDIT.

mod common;

use common::parse;
use expect_test::expect_file;
use libsakura::parser::EntryPoint;
use std::fs;
use std::path::Path;

#[test]
fn parser_success_0001_empty_source() {
    let root = Path::new(env!("CARGO_MANIFEST_DIR"));

    let source = fs::read_to_string(root.join("data/tests/parser/success/0001_empty_source.sk"))
        .expect("unable to read source file");

    let (result, _has_errors) = parse(EntryPoint::SourceFile, &source);

    let expected = expect_file!(root.join("data/tests/parser/success/0001_empty_source.skast"));

    expected.assert_eq(&result);
}

#[test]
fn parser_success_0002_simple_type_declaration() {
    let root = Path::new(env!("CARGO_MANIFEST_DIR"));

    let source =
        fs::read_to_string(root.join("data/tests/parser/success/0002_simple_type_declaration.sk"))
            .expect("unable to read source file");

    let (result, _has_errors) = parse(EntryPoint::SourceFile, &source);

    let expected =
        expect_file!(root.join("data/tests/parser/success/0002_simple_type_declaration.skast"));

    expected.assert_eq(&result);
}

#[test]
fn parser_success_0003_simple_struct_declaration() {
    let root = Path::new(env!("CARGO_MANIFEST_DIR"));

    let source = fs::read_to_string(
        root.join("data/tests/parser/success/0003_simple_struct_declaration.sk"),
    )
    .expect("unable to read source file");

    let (result, _has_errors) = parse(EntryPoint::SourceFile, &source);

    let expected =
        expect_file!(root.join("data/tests/parser/success/0003_simple_struct_declaration.skast"));

    expected.assert_eq(&result);
}

#[test]
fn parser_success_0004_generic_struct_declaration() {
    let root = Path::new(env!("CARGO_MANIFEST_DIR"));

    let source = fs::read_to_string(
        root.join("data/tests/parser/success/0004_generic_struct_declaration.sk"),
    )
    .expect("unable to read source file");

    let (result, _has_errors) = parse(EntryPoint::SourceFile, &source);

    let expected =
        expect_file!(root.join("data/tests/parser/success/0004_generic_struct_declaration.skast"));

    expected.assert_eq(&result);
}
